{
    "contents" : "# server.R\nrequire(jsonlite)\nrequire(RCurl)\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\n\n\ndeath_df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from DISEASE where NUMBER_OF_DEATHS < 100000\"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_nar784', PASS='orcl_nar784', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))\n\nsummary(death_df)\nhead(death_df)\n\n\n# Create the Bar Chart Data Frame\n\nbar_df <- death_df %>% group_by(COUNTRY_NAME, SEX) %>% filter(COUNTRY_NAME %in% c(\"Afghanistan\", \"China\", \"Colombia\", \"Japan\", \"Korea, Republic of\", \"Pakistan\", \"Philippines\", \"Spain\", \"United Kingdom\", \"United States\")) %>% filter(SEX %in% c(\"Female\", \"Male\")) %>% summarize(AVG_DR = mean(DEATH_RATE_PER_100_000))\n\nbar_comb <- bar_df %>% ungroup %>% group_by(SEX) %>% summarize(WINDOW_AVG_DR=mean(AVG_DR))\nbar_df <- inner_join(bar_df, bar_comb, by=\"SEX\") %>% arrange(COUNTRY_NAME)\n\nsummary(bar_df)\n\nshinyServer(function(input, output) {\n  \n# Begin code for first plot (crosstab): use light and dark values to adjust the plot when it is run. We use SQL queries to generate this plot. Size of plot is adjustable.  \n  \n  KPI_Low_Max_value <- reactive({input$KPI1})     \n  KPI_Medium_Max_value <- reactive({input$KPI2})\n  rv <- reactiveValues(alpha = 0.5)\n  observeEvent(input$light, { rv$alpha <- 0.5 })\n  observeEvent(input$dark, { rv$alpha <- 0.78 })\n\n  df1 <- eventReactive(input$clicks1, {data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\n            \"select AGE_GROUP, SEX, sum_death, sum_100, kpi as ratio, \n                                                                                case\n                                                                                when kpi < \"p1\" then \\\\\\'03 Low\\\\\\'\n                                                                                when kpi < \"p2\" then \\\\\\'02 Medium\\\\\\'\n                                                                                else \\\\\\'01 High\\\\\\'\n                                                                                end kpi\n                                                                                from (select AGE_GROUP, SEX, \n                                                                                sum(NUMBER_OF_DEATHS)/100000 as sum_death, sum(DEATH_RATE_PER_100_000)/1000000 as sum_100, \n                                                                                (sum(NUMBER_OF_DEATHS) / (sum(DEATH_RATE_PER_100_000)/10)) as kpi\n                                                                                from DISEASE \n                                                                                group by SEX, AGE_GROUP)\n                                                                                order by AGE_GROUP;\"\n                                                                                ')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_nar784', PASS='orcl_nar784', \n                                                                                                  MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value(), p2=KPI_Medium_Max_value()), verbose = TRUE)))\n  })\n  \n  output$distPlot1 <- renderPlot(height=500, width=900,{             \n    plot1 <- ggplot() + \n      coord_cartesian() + \n      scale_x_discrete() +\n      scale_y_discrete() +\n      labs(title=isolate(input$title)) +\n      labs(x=paste(\"Age Group\"), y=paste(\"Sex\")) +\n      layer(data=df1(), \n            mapping=aes(x=as.character(AGE_GROUP), y=SEX, label=round(SUM_DEATH,0)), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"text\",\n            geom_params=list(colour=\"black\"), \n            position=position_identity()\n      ) +\n      layer(data=df1(), \n            mapping=aes(x=as.character(AGE_GROUP), y=SEX, label=round(SUM_100,1)), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"text\",\n            geom_params=list(colour=\"black\", vjust=2), \n            position=position_identity()\n      ) +\n      \n      layer(data=df1(), \n            mapping=aes(x=as.character(AGE_GROUP), y=SEX, fill=KPI), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"tile\",\n            geom_params=list(alpha=rv$alpha), \n            position=position_identity()\n            \n      )\n    plot1\n  }) \n  \n  observeEvent(input$clicks1, {\n    print(as.numeric(input$clicks1))\n  })\n  \n  \n  \n  \n  \n# Begin code for Second Tab (Bar Chart): Size of plot is adjustable. This code uses a dataframe generated with R instead of SQL queries.\n  \n  \n  \n  df2 <- eventReactive(input$clicks2, {bar_df})\n  \n  output$distPlot2 <- renderPlot(height=450, width=5000, {\n    plot2 <- ggplot() + \n      coord_cartesian() + \n      scale_x_discrete() +\n      scale_y_continuous() +\n      facet_wrap(~SEX, ncol=1) +\n      labs(title='Country vs Death Rate per 100000 ') +\n      labs(x=paste(\"\"), y=paste(\"Avg. Death Rate per 100000 (Avg DR,Wnd Avg DR, Avg DR - Wnd Avg in 1000's)\")) +\n      layer(data=df2(), \n            mapping=aes(x=COUNTRY_NAME, y=AVG_DR), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"bar\",\n            geom_params=list(colour=\"sky blue\", fill=\"dark green\"), \n            position=position_identity()\n      ) + coord_flip() +\n      layer(data=df2(), \n            mapping=aes(x=COUNTRY_NAME, y=AVG_DR, label=round((AVG_DR/1000),1)), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"text\",\n            geom_params=list(colour=\"black\", hjust=0), \n            position=position_identity()\n      ) +\n      layer(data=df2(), \n            mapping=aes(x=COUNTRY_NAME, y=AVG_DR, label=round((WINDOW_AVG_DR/1000),1)), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"text\",\n            geom_params=list(colour=\"black\", hjust=-2.5), \n            position=position_identity()\n      ) +\n      layer(data=df2(), \n            mapping=aes(x=COUNTRY_NAME, y=AVG_DR, label=round(((AVG_DR - WINDOW_AVG_DR)/1000),1)), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"text\",\n            geom_params=list(colour=\"black\", hjust=-9), \n            position=position_identity()\n      ) +\n      layer(data=df2(), \n            mapping=aes(yintercept = WINDOW_AVG_DR), \n            geom=\"hline\",\n            geom_params=list(colour=\"red\")\n      ) \n    \n    plot2\n  })\n  observeEvent(input$clicks2, {\n    print(as.numeric(input$clicks2))\n  })\n \n  \n   \n# Begin code for Third Tab (Scatter Plot): Size of plot is adjustable. This code uses a dataframe generated with R instead of SQL queries.\n \n  \n  \n   \ndf3 <- eventReactive(input$clicks3, {death_df  })\n  \n  output$distPlot3 <- renderPlot( {\n    plot3 <- ggplot() + \n      coord_cartesian() + \n      scale_x_continuous() +\n      scale_y_continuous() +\n      labs(title='How Disease Affects Number of Deaths Worldwide \\n When Compared to Death Per 100,000 Statistics from 1970 to 2010') +\n      labs(x=\"Number of Deaths\", y=paste(\"Death Rate Per 100,000\")) +\n      layer(data=df3(), \n            mapping=aes(x=as.numeric(as.character(NUMBER_OF_DEATHS)), y=as.numeric(as.character(DEATH_RATE_PER_100_000)), color=YEAR), \n            stat=\"identity\", \n            stat_params=list(), \n            geom=\"point\",\n            geom_params=list(), \n            position=position_jitter(width=0.3, height=0)\n      )\n    \n    plot3\n  })\n  observeEvent(input$clicks3, {\n    print(as.numeric(input$clicks3))\n  })\n})\n",
    "created" : 1449351827449.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3173391980",
    "id" : "3A76259D",
    "lastKnownWriteTime" : 1449541168,
    "path" : "~/DataVisualization/Final Project/04 Shiny/server.R",
    "project_path" : "04 Shiny/server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}